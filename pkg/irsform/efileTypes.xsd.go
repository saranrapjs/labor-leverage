// Code generated by xgen. DO NOT EDIT.

package irsform

import ("time")

// ReturnDataAttributes is The number of return documents in the return
type ReturnDataAttributes struct {
	DocumentCntAttr int `xml:"documentCnt,attr"`
}

// DocumentAttributes is Software Version
type DocumentAttributes struct {
	DocumentIdAttr         string    `xml:"documentId,attr"`
	SoftwareIdAttr         string    `xml:"softwareId,attr,omitempty"`
	SoftwareVersionNumAttr *TextType `xml:"softwareVersionNum,attr,omitempty"`
}

// StringType is Base type for a string
type StringType string

// URIType is Base type for a URI
type URIType string

// DateType is Base type for a date
type DateType string

// YearMonthType is Year and month type in the format of YYYY-MM
type YearMonthType string

// TaxYearEndMonthDtType is Year and month type in the format of YYMM
type TaxYearEndMonthDtType string

// MonthType is Month type in the format of --MM
type MonthType string

// MonthDayType is Month and day type in the format of --MM-DD
type MonthDayType string

// QuarterEndDateType is The end date of a calendar quarter.
type QuarterEndDateType string

// TimestampType is Base type for a date and time stamp
type TimestampType string

// YearType is Base type for a 4-digit year
type YearType string

// BooleanType is Base type for a boolean. Typically used on an Yes or No field.
type BooleanType bool

// CheckboxType is Typically used by an optional checkbox.
type CheckboxType string

// IntegerType is Base type for an integer
type IntegerType int

// IntegerNNType is Base type for a non-negative integer
type IntegerNNType int

// IntegerPosType is Base type for a positive integer
type IntegerPosType int

// LongIntegerType is Base type for a long integer. Range of values is: -9,223,372,036,854,775,808 thru 9,223,372,036,854,775,807
type LongIntegerType int64

// DecimalType is 2-digit decimal typically used by a decimal amount field.
type DecimalType float64

// DecimalNNType is 2-digit decimal typically used by a non-negative decimal amount field.
type DecimalNNType float64

// USAmountType is Type for a U.S. integer amount field
type USAmountType int

// USAmountNNType is Type for a U.S. non-negative integer amount field
type USAmountNNType int

// USAmountNegType is Type for a U.S. negative integer amount field
type USAmountNegType int

// USAmountNonPosType is Type for a U.S. non-positive integer amount field
type USAmountNonPosType int

// USAmountPosType is Type for a U.S. positive integer amount field
type USAmountPosType int

// USDecimalAmountType is Type for a U.S. amount field with dollars and cents
type USDecimalAmountType float64

// USDecimalAmountNNType is Type for a U.S. non-negative amount field with dollars and cents
type USDecimalAmountNNType float64

// USDecimalAmountPosType is Type for a U.S. positive amount field with dollars and cents
type USDecimalAmountPosType float64

// USLargeDecimalAmountType is Type for a U.S. amount field with dollars and cents that allows 4 decimals
type USLargeDecimalAmountType float64

// ForeignAmountType is Type for a foreign integer amount field
type ForeignAmountType int

// ForeignAmountNNType is Type for a foreign non-negative integer amount field
type ForeignAmountNNType int

// Decimal2RatioType is A fraction between 0 and 1 that allows up to 2 decimal places
type Decimal2RatioType float64

// Decimal4RatioType is A fraction between 0 and 1 that requires 4 decimal places
type Decimal4RatioType float64

// SmallRatioType is A fraction between 0 and .9999 that allows up to 4 decimal places
type SmallRatioType float64

// RatioType is A fraction between 0 and 1 that allows up to 5 decimal places
type RatioType float64

// LargeRatioType is A non-negative decimal that allows up to 22 total digits and 12 fraction digits
type LargeRatioType float64

// BusinessActivityCodeType is Business Activity Code
type BusinessActivityCodeType int

// RoutingTransitNumberType is Routing Transit Number - 9 digits beginning with 01 through 12, or 21 through 32
type RoutingTransitNumberType string

// BankAccountNumberType is Bank Account Number - 17 alphanumeric characters with hyphens
type BankAccountNumberType string

// BankAccountType is Savings
type BankAccountType string

// SSNType is Type for Social Security No. - 9 digits
type SSNType string

// EINType is Type for Employer Identification No. - 9 digits
type EINType string

// ETINType is Type for Electronic Transmitter Identification No. - 5 digits
type ETINType string

// PTINType is Type for Preparer Personal Identification No. - P followed by 8 digits
type PTINType string

// EFINType is Type for Electronic Filing Identification No. - 6 digits
type EFINType string

// PINType is Type for Practitioner PIN, Self-Select PIN and Third Party Designee PIN
type PINType string

// ISPType is Type for Intermediate Service Provider No. - 6 uppercase alphanumeric characters
type ISPType string

// OriginatorType is The type of originator
type OriginatorType string

// SignatureType is Used for a PIN signature
type SignatureType string

// SoftwareIdType is The Software ID - 8 digits
type SoftwareIdType string

// SoftwareVersionType is The Software Version - 20 characters
type SoftwareVersionType string

// IdType is Pattern used for generating TransmissionId, OriginId, ItemId, and AcknowledgementId. A timestamp may be used as an ID as long as it is unique within its parent element and within the filing season. Up to 4-decimal fractional digits may be used for the second in a timestamp to increase its uniqueness. Legal Characters: A-Z, a-z, 0-9, colon, period and hyphen.
type IdType string

// IdListType is Type for list of Ids
type IdListType []string

// BusinessNameLine1Type is Typically used for line 1 of a business name. Legal Characters: A-Z, a-z, 0-9, hash, hyphen, parentheses, ampersand, apostrophe and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type BusinessNameLine1Type string

// BusinessNameLine2Type is Typically used for line 2 of a business name. Legal Characters: A-Z, a-z, 0-9, hash, slash, percent, hyphen, parentheses, ampersand, apostrophe and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type BusinessNameLine2Type string

// InCareOfNameType is Typically used for line 3 of a business name or line 2 of an individual name. Element must begin with a percent followed by a space. Legal Characters: A-Z, a-z, 0-9, hash, slash, percent, hyphen, parentheses, ampersand, apostrophe and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type InCareOfNameType string

// NameLine1Type is Typically used for line 1 of a name. Legal Characters: A-Z, a-z, hyphen, ampersand, less-than sign and single space. Illegal Character: leading space, trailing space, adjacent spaces, spaces surrounding the less-than sign and other symbols.
type NameLine1Type string

// PersonNameType is Typically used for a person's name. Legal Characters: A-Z, a-z, 0-9, hyphen, apostrophe and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type PersonNameType string

// PersonTitleType is Typically used for a person's title. Legal Characters: printable characters from ! to ~ plus single space. Illegal Character: leading space, trailing space, adjacent spaces.
type PersonTitleType string

// BusinessNameControlType is Used for a Name Control. Legal Characters: A-Z, 0-9, hyphen and ampersand. Illegal Character: spaces and symbols.
type BusinessNameControlType string

// CheckDigitType is Used for a Check Digit field. 2 uppercase characters.
type CheckDigitType string

// StreetAddressType is Used for a street address. Legal Characters: A-Z, a-z, 0-9, hyphen, slash and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type StreetAddressType string

// CityType is Used for a city. Legal Characters: A-Z, a-z, and single space. Illegal Character: leading space, trailing space, adjacent spaces, and symbols.
type CityType string

// StateType is Armed Forces Pacific
type StateType string

// FUTAStateCdType is Wyoming
type FUTAStateCdType string

// ZIPCodeType is ZIP Code - 5 digits plus optional 4 or 7 digits
type ZIPCodeType string

// PhoneNumberType is Used for a phone no. - 10 digits
type PhoneNumberType string

// ForeignPhoneNumberType is Used for a foreign phone no. - up to 30 digits
type ForeignPhoneNumberType string

// EmailAddressType is Used for an email address. Symbol @ follows and is followed by at least one of the characters allowed by TextType - up to 75 characters in total.
type EmailAddressType string

// TextType is Used for a text field. Legal Characters: printable characters from ! to ~ plus the [monetary] pound, section and multiplication symbols, plus Spanish characters and single space. Illegal Character: leading space, trailing space, adjacent spaces.
type TextType string

// ExplanationType is A typical explanation field that allows up to 9000 characters
type ExplanationType string

// LineExplanationType is A one-line explanation field that allows up to 100 characters.
type LineExplanationType string

// ShortExplanationType is A short explanation field that allows up to 1000 characters.
type ShortExplanationType string

// ShortDescriptionType is A short description field that allows up to 20 characters.
type ShortDescriptionType string

// MediumExplanationType is A medium explanation field that allows up to 100,000 characters.
type MediumExplanationType string

// LongExplanationType is A long explanation field that allows up to 1,000,000 characters.
type LongExplanationType string

// CountryType is Zimbabwe
type CountryType string

// AllCountriesType is Country Code Type Including 'US'
type AllCountriesType struct {
	CountryType string
}

// USItemizedEntryType ...
type USItemizedEntryType struct {
	Desc string `xml:"Desc"`
	Amt  int    `xml:"Amt"`
}

// ForeignItemizedEntryType ...
type ForeignItemizedEntryType struct {
	Desc       string `xml:"Desc"`
	ForeignAmt int    `xml:"ForeignAmt"`
}

// DepreciationConventionCodeType is Straight line convention
type DepreciationConventionCodeType string

// DepreciationConventionType is Depreciation convention abbreviations
type DepreciationConventionType string

// DepreciationMethodCodeType is Method
type DepreciationMethodCodeType string

// DepreciationMethodType is Depreciation method abbreviations
type DepreciationMethodType string

// USAddressType is ZIP code
type USAddressType struct {
	AddressLine1Txt     string `xml:"AddressLine1Txt"`
	AddressLine2Txt     string `xml:"AddressLine2Txt,omitempty"`
	CityNm              string `xml:"CityNm"`
	StateAbbreviationCd string `xml:"StateAbbreviationCd"`
	ZIPCd               string `xml:"ZIPCd"`
}

// OtherUSAddressType is ZIP code
type OtherUSAddressType struct {
	AddressLine1Txt     string `xml:"AddressLine1Txt,omitempty"`
	AddressLine2Txt     string `xml:"AddressLine2Txt,omitempty"`
	CityNm              string `xml:"CityNm,omitempty"`
	StateAbbreviationCd string `xml:"StateAbbreviationCd,omitempty"`
	ZIPCd               string `xml:"ZIPCd,omitempty"`
}

// ForeignAddressType is Address line 2
type ForeignAddressType struct {
	AddressLine1Txt   string      `xml:"AddressLine1Txt"`
	AddressLine2Txt   string      `xml:"AddressLine2Txt,omitempty"`
	CityNm            interface{} `xml:"CityNm,omitempty"`
	ProvinceOrStateNm interface{} `xml:"ProvinceOrStateNm,omitempty"`
	CountryCd         string      `xml:"CountryCd"`
	ForeignPostalCd   interface{} `xml:"ForeignPostalCd,omitempty"`
}

// OtherForeignAddressType is Address line 2
type OtherForeignAddressType struct {
	AddressLine1Txt   string      `xml:"AddressLine1Txt,omitempty"`
	AddressLine2Txt   string      `xml:"AddressLine2Txt,omitempty"`
	CityNm            interface{} `xml:"CityNm,omitempty"`
	ProvinceOrStateNm interface{} `xml:"ProvinceOrStateNm,omitempty"`
	CountryCd         string      `xml:"CountryCd,omitempty"`
	ForeignPostalCd   interface{} `xml:"ForeignPostalCd,omitempty"`
}

// BusinessNameType is Business name line 2
type BusinessNameType struct {
	BusinessNameLine1Txt string `xml:"BusinessNameLine1Txt"`
	BusinessNameLine2Txt string `xml:"BusinessNameLine2Txt,omitempty"`
}

// NameAndAddressType is Recurring Name and Address Type
type NameAndAddressType struct {
	PersonNm       string              `xml:"PersonNm"`
	BusinessName   *BusinessNameType   `xml:"BusinessName"`
	USAddress      *USAddressType      `xml:"USAddress"`
	ForeignAddress *ForeignAddressType `xml:"ForeignAddress"`
}

// BINType ...
type BINType string

// GTXKeyType ...
type GTXKeyType string

// MethodOfAccountingType ...
type MethodOfAccountingType string

// NumericType ...
type NumericType string

// AlphaNumericType ...
type AlphaNumericType string

// AlphaNumericAndParenthesesType ...
type AlphaNumericAndParenthesesType string

// IRSServiceCenterType ...
type IRSServiceCenterType string

// StringVARIOUSType ...
type StringVARIOUSType string

// CUSIPNumberType ...
type CUSIPNumberType string

// FuelGallonsType ...
type FuelGallonsType int

// FuelGallonsNNType ...
type FuelGallonsNNType int

// MilesType ...
type MilesType int

// MilesNNType ...
type MilesNNType int

// GovernmentCodeType is Philadelphia
type GovernmentCodeType string

// TaxShelterRegistrationType is Tax Shelter Registration Number - 9 positions in length starting with MA followed by 7 numbers or 11 positions in length composed of all numbers or either of the two literals listed below.
type TaxShelterRegistrationType string

// NumberOfSharesType is Recurring Number of Shares Type
type NumberOfSharesType int

// VINType is Type for Vehicle Identification No. - 1 to 17 or 19 alphanumeric characters
type VINType string

// NumberOfDaysType is Number of days
type NumberOfDaysType int

// PINEnteredByType is Used to indicate who entered the PIN (Personal Identification Number)
type PINEnteredByType string

// PINCodeType is Used to indicate the type of  PIN (Personal Identification Number)
type PINCodeType string

// ConsortiumType is Used to indicate if a return was filed using the English or Spanish Free-File Program or Free Fillable Forms
type ConsortiumType string

// PartnersPageFilingType is Used to indicate if a return was filed using the English or Spanish Partners Page (Affordable Filing Program)
type PartnersPageFilingType string

// PersonFullNameType is Person Last Name
type PersonFullNameType struct {
	PersonFirstNm string `xml:"PersonFirstNm"`
	PersonLastNm  string `xml:"PersonLastNm,omitempty"`
}

// PersonFirstNameType is Typically used for a person's first name. Legal Characters: A-Z, a-z, hyphen and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type PersonFirstNameType string

// PersonLastNameType is Typically used for a person's last name. Legal Characters: A-Z, a-z, hyphen and single space. Illegal Character: leading space, trailing space, adjacent spaces, and other symbols.
type PersonLastNameType string

// PersonNameControlType is Used for a Name Control. Legal Characters: A-Z, hyphen and space. Illegal Character: numbers and symbols.
type PersonNameControlType string

// IPv4Type is Decimal format for IP Address
type IPv4Type string

// IPv6Type is Hexidecimal format for IP Address
type IPv6Type string

// IPAddressType is IP address type to include either decimal or hexidecimal format
type IPAddressType struct {
	IPv4AddressTxt string `xml:"IPv4AddressTxt"`
	IPv6AddressTxt string `xml:"IPv6AddressTxt"`
}

// TimeType is Base type for time
type TimeType time.Time

// TimezoneType is Hawaiian Daylight
type TimezoneType string

// STINType is Type for Preparer Personal Identification No. - S followed by 8 digits
type STINType string

// VehicleDescriptionGrpType is Model of Vehicle
type VehicleDescriptionGrpType struct {
	VehicleModelYr      string `xml:"VehicleModelYr"`
	VehicleMakeNameTxt  string `xml:"VehicleMakeNameTxt"`
	VehicleModelNameTxt string `xml:"VehicleModelNameTxt"`
}

// RegistrationNumType ...
type RegistrationNumType string

// ForeignEntityIdentificationGrpType ...
type ForeignEntityIdentificationGrpType struct {
	ForeignEntityReferenceIdNum interface{} `xml:"ForeignEntityReferenceIdNum"`
}

// DeviceIdType ...
type DeviceIdType string

// ForeignRegulatedInvestmtCompCdType ...
type ForeignRegulatedInvestmtCompCdType string

// SubmissionIdType ...
type SubmissionIdType string

// FTINType ...
type FTINType string

// CurrencyCodeType is Zloty - POLAND
type CurrencyCodeType string

// PTEPGroupCodeType is Section 951(a)(1)(A) PTEP
type PTEPGroupCodeType string

// StockDescriptionType is Stock Description Type
type StockDescriptionType string

// Decimal1RatioType is Decimal 1 Ratio Type
type Decimal1RatioType float64

// Decimal3RatioType is Decimal 3 Ratio Type
type Decimal3RatioType float64

// AlphaRowIdType is RowID type in the format of A, B, C, D , ..., Z, AA, AB, AC, ..., or a, b, c, d, ..., z, aa, ab, ac, ...
type AlphaRowIdType string

// RomanRowIdType is RowID type in the format of I, II, III, IV, V , ..., or i, ii, iii, iv, v, ...
type RomanRowIdType string

// NumericRowIdType is RowID type in the format of 1, 2, 3, 4, 5, ...
type NumericRowIdType int

// Form1099StateLocalTaxType is State abbreviation code
type Form1099StateLocalTaxType struct {
	StateAbbreviationCd    string      `xml:"StateAbbreviationCd"`
	StateIdNum             interface{} `xml:"StateIdNum,omitempty"`
	StateTaxWithheldAmt    int         `xml:"StateTaxWithheldAmt"`
	LocalAbbreviationCdTxt interface{} `xml:"LocalAbbreviationCdTxt,omitempty"`
	LocalityNm             string      `xml:"LocalityNm,omitempty"`
	LocalTaxWithheldAmt    int         `xml:"LocalTaxWithheldAmt,omitempty"`
}

// Form1099OtherStateLocalTaxType is State abbreviation code
type Form1099OtherStateLocalTaxType struct {
	StateTaxWithheldAmt int         `xml:"StateTaxWithheldAmt"`
	StateAbbreviationCd string      `xml:"StateAbbreviationCd"`
	StateIdNum          interface{} `xml:"StateIdNum,omitempty"`
	StateIncomeAmt      int         `xml:"StateIncomeAmt,omitempty"`
	LocalTaxWithheldAmt int         `xml:"LocalTaxWithheldAmt,omitempty"`
	LocalityNm          string      `xml:"LocalityNm,omitempty"`
	LocalIncomeAmt      int         `xml:"LocalIncomeAmt,omitempty"`
}
